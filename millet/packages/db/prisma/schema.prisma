// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  PROCESSING
  REFUNDED
}

enum PaymentMethod {
  COD
  UPI
}
enum TransactionType {
  PAYMENT
  REFUND
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  username          String?           @unique
  password          String
  phone             String?
  role              UserRole          @default(USER)
  emailVerified     Boolean           @default(false)
  verificationToken String?
  resetToken        String?
  refreshToken      String?
  resetTokenExpiry  DateTime?
  isActive          Boolean           @default(true)
  avatarUrl         String?
  dateOfBirth       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  addresses         Address[]
  orders            Order[]
  reviews           Review[]
  wishlist          Wishlist[]
  cart              Cart?
  notifications     Notification[]
  recentlyViewed    RecentlyViewed[]
  transactions      Transaction[]

}

model Category {
  id           String     @id @default(cuid())
  name         String
  slug         String      @unique
  description  String?
  parentId     String?
  parent       Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]  @relation("CategoryHierarchy")
  image        String?
  products     Product[]
}

model Review {
  id           String     @id @default(cuid())
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model Product {
  id               String           @id @default(cuid())
  name             String
  slug             String           @unique
  description      String?
  price            Float            @default(0)
  comparePrice     Float?
  stock            Int              @default(0)
  sku              String?          @unique
  tags             String[]         @default([])
  categoryId       String?
  category         Category?        @relation(fields: [categoryId], references: [id])
  createdAt        DateTime         @default(now())

  // Relations
  images           ProductImage[]
  reviews          Review[]
  variants         ProductVariant[]
  cartItems        CartItem[]
  orderItems       OrderItem[]      @relation("ProductOrderItems")
  wishlistItems    Wishlist[]
  recentlyViewed   RecentlyViewed[]

  @@index([slug])
  @@index([categoryId])
  @@index([price])
}

model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  alt         String?
  isPrimary   Boolean  @default(false)
  order       Int      @default(0)

  @@index([productId])
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String?
  sku         String?  @unique
  price       Float?
  stock       Int      @default(0)
  attributes  Json?    @default("{}")
  createdAt   DateTime @default(now())
  
  @@index([productId])
}
model Address {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  phone             String
  addressLine1      String
  addressLine2      String?
  city              String
  state             String
  country           String
  postalCode        String
  isDefault         Boolean           @default(false)
  type              String?           // HOME, OFFICE, OTHER
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  ordersShipping    Order[]           @relation("ShippingAddress")
  ordersBilling     Order[]           @relation("BillingAddress")
  orders            Order[]           @relation("OrderAddress")
}

model Cart {
  id                String            @id @default(cuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             CartItem[]
  couponCode        String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model CartItem {
  id                String            @id @default(cuid())
  cartId            String
  cart              Cart              @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId         String
  product           Product           @relation(fields: [productId], references: [id])
  quantity          Int
  price             Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id                String            @id @default(cuid())
  orderNumber       String            @unique
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  items             OrderItem[]
  subtotal          Float
  tax               Float
  shippingFee       Float
  discount          Float             @default(0)
  total             Float
  addressId         String
  address           Address           @relation("OrderAddress", fields: [addressId], references: [id])
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  paymentMethod     PaymentMethod
  paymentId         String?
  shippingAddressId String
  shippingAddress   Address           @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress    Address           @relation("BillingAddress", fields: [billingAddressId], references: [id])
  notes             String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  refundedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  transactions      Transaction[]
  shipments         Shipment[]
  refunds           Refund[]

   @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id                String            @id @default(cuid())
  orderId           String
  order             Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productName       String
  productImage      String?
  productId         String
  product           Product           @relation("ProductOrderItems", fields: [productId], references: [id])  // âœ… YE CHANGE KARO
  variantDetails    Json?
  quantity          Int
  price             Float
  total             Float
  commission        Float?
  createdAt         DateTime          @default(now())
}
model Transaction {
  id                String            @id @default(cuid())
  orderId           String
  order             Order             @relation(fields: [orderId], references: [id])
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  amount            Float
  type              TransactionType   // PAYMENT or REFUND (using enum now)
  status            PaymentStatus     // Uses PaymentStatus enum
  method            PaymentMethod
  transactionId     String            @unique
  
  // Card Payment Details
  cardLast4         String?
  cardBrand         String?           // VISA, MASTERCARD, AMEX, etc.
  
  // QR/UPI Payment Details
  screenshotUrl     String?           // Screenshot of payment proof
  upiTransactionId  String?           // UPI reference number
  
  // Bank Transfer Details
  bankReferenceNo   String?           // Bank transaction reference
  
  // Verification (for manual payment methods)
  verifiedAt        DateTime?
  verifiedBy        String?           // Admin user ID who verified
  rejectionReason   String?           // If payment rejected
  
  // Additional Data
  metadata          Json?             // Payment gateway response or extra data
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([transactionId])
}

// Payment Configuration Model
model PaymentConfig {
  id                String   @id @default(cuid())
  
  // UPI Details
  upiId             String?
  upiQrCodeUrl      String?           // QR code image for UPI payments
  
  // Bank Transfer Details
  accountNumber     String?
  ifscCode          String?
  accountHolderName String?
  bankName          String?
  branchName        String?
  
  // Payment Gateway Config (Razorpay, Stripe, etc.)
  razorpayKeyId     String?
  razorpayKeySecret String?
  stripePublicKey   String?
  stripeSecretKey   String?
  
  // Settings
  isActive          Boolean  @default(true)
  autoVerifyPayments Boolean @default(false)
  minOrderAmount    Float?
  maxOrderAmount    Float?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("payment_configs")
}


model Coupon {
  id                String            @id @default(cuid())
  code              String            @unique
  description       String?
  type              String            // PERCENTAGE, FIXED
  value             Float
  minOrderAmount    Float?
  maxDiscount       Float?
  usageLimit        Int?
  usageCount        Int               @default(0)
  userLimit         Int?              // per user limit
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean           @default(true)
  applicableProducts String[]         // Product IDs
  applicableCategories String[]       // Category IDs
  excludedProducts  String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}


model Wishlist {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId         String
  product           Product           @relation(fields: [productId], references: [id])
  createdAt         DateTime          @default(now())
  @@unique([userId, productId])
}

model Notification {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  message           String
  type              String            // ORDER, PROMOTION, SYSTEM
  data              Json?
  isRead            Boolean           @default(false)
  createdAt         DateTime          @default(now())
}

model Newsletter {
  id                String            @id @default(cuid())
  email             String            @unique
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
}

model Shipment {
  id                String            @id @default(cuid())
  orderId           String
  order             Order             @relation(fields: [orderId], references: [id])
  carrier           String
  trackingNumber    String
  trackingUrl       String?
  status            String
  estimatedDelivery DateTime?
  shippedAt         DateTime
  deliveredAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Refund {
  id                String            @id @default(cuid())
  orderId           String
  order             Order             @relation(fields: [orderId], references: [id])
  amount            Float
  reason            String
  status            String            // PENDING, APPROVED, REJECTED, COMPLETED
  notes             String?
  processedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model RecentlyViewed {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId         String
  product           Product           @relation(fields: [productId], references: [id])
  viewedAt          DateTime          @default(now())

  @@unique([userId, productId])
}

model Setting {
  id                String            @id @default(cuid())
  key               String            @unique
  value             Json
  group             String            // GENERAL, PAYMENT, SHIPPING, EMAIL
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}